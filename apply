# lapply, sapply, apply, tapply, mapply

# lapply(): Loop over a list and evaluate a function on each element
# 
# sapply(): Same as lapply but try to simplify the result
# 
# apply(): Apply a function over the margins of an array
# 
# tapply(): Apply a function over subsets of a vector
# 
# mapply(): Multivariate version of lapply


function(X, FUN, ...) {
  FUN <- match.fun(FUN)
  if (!is.vector(X) || is.object(X)) {
    X <- as.list(X)
  }
  .Internal(lapply(X, FUN))
}

set.seed(123)
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
a <- 1:5
b <- rnorm(10)
mean(a)
mean(b)

# Evaluate a funcion multiple times
x <- 1:4
lapply(x, runif)
lapply(x, rnorm(100))

x <- 1:4
lapply(x, runif, min = 0, max = 10)
lapply(x, rnorm, mean = 2, sd = 10)

x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2)) 
x
lapply(x, function(y) { y[,1] })

f <- function(y) {
  y[, 1]
}
lapply(x, f)

x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)

x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)


y <- rnorm(300)
county <- rep(1:10, each = 10)
split(y, county)
function (n, k, length = n * k, labels = seq_len(n), ordered = FALSE)
gl(n = 20, k = 30, length = 600)


x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
splitx <- split(x, f)
lapply(splitx, mean)


library(datasets)
head(airquality)
s <- split(airquality, f = airquality$Month)
lapply(s, function(x) {
  colMeans(x[, c("Ozone", "Solar.R", "Wind")])
})


sapply(s, function(x) {
        colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)
})


x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2)
str(split(x, list(f1, f2), drop = TRUE))


x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, mean, simplify = TRUE)

xsplit <- split(x, f)
lapply(xsplit, mean)
sapply(xsplit, mean)

tapply(x, f, range)
tapply(x, f, range, simplify = TRUE) # not simplify. 

x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)  ## Take the mean of each column
colMeans(x)
apply(x, 1, mean)
rowMeans(x)
apply(x, 2, sum) 
apply(x, 1, sum) 

x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75)) 
apply(x, 2, quantile, probs = c(0.25, 0.75)) 

x <- rnorm(100)
quantile(x = x, probs = c(0.1, 0.25, 0.50, 0.75, 0.95))


a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
apply(a, c(1, 3), mean)
rowMeans(a, dims = 2)    ## Faster

mapply(rep, 1:4, 4:1)

noise <- function(n, mean, sd) {
               rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
